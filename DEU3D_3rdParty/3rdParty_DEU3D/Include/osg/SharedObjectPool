/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/


#ifndef SHARED_OBJECT_POOL
#define SHARED_OBJECT_POOL 1

#include <osg/Referenced>
#include <osg/ref_ptr>
#include <osg/observer_ptr>
#include <OpenThreads/Thread>
#include <OpenThreads/Mutex>
#include <OpenThreads/Block>
#include <OpenThreads/Atomic>
#include <IDProvider/ID.h>
#include <osg/Image>
#include <osg/Texture>

namespace osg {

class OSG_EXPORT SharedObjectPool : public Referenced
{
protected:
    explicit SharedObjectPool(void)
    {
    }
    virtual ~SharedObjectPool(void)
    {
        m_pTrimmerThread = NULL;
    }

public:
    static SharedObjectPool *instance(void);        // 获取共享对象池的唯一实例

public:
    bool        initialize(void);            // 初始化共享对象池
    void        unInitialized(void);                       // 反初始化共享对象池
    void        addObject(const ID &id, Object *pObject);
    void        addTexture(Image *pImage, Texture *pTexture);
    bool        findObject(const ID &id, ref_ptr<Object> &pObject);
    bool        findObject(const osg::Image *pImage, ref_ptr<Texture> &pTexture);
    void        clearObjectByDataset(unsigned nDataset = ~0u);

protected:
    void        trimePool(void);

protected:
    class TrimmerThread : public OpenThreads::Thread, public OpenSP::Ref
    {
    public:
        explicit TrimmerThread(SharedObjectPool *pThis) : m_pThis(pThis)
        {
            setStackSize(64u * 1024u);
            m_MissionFinished.exchange(0u);
        }
        virtual ~TrimmerThread(void)
        {
            m_MissionFinished.exchange(1u);
            join();
        }

    protected:
        virtual void run(void);

    protected:
        OpenThreads::Atomic     m_MissionFinished;

        SharedObjectPool       *m_pThis;
    };
    OpenSP::sp<TrimmerThread>           m_pTrimmerThread;
    OpenThreads::Mutex                  m_mtxObjectPool;

    struct SharedObject
    {
        osg::observer_ptr<Object>   m_pObject;
        UINT_64                     m_nLastRefTime;
        const SharedObject &operator=(SharedObject &so)
        {
            if(this == &so) return *this;
            m_pObject = so.m_pObject;
            m_nLastRefTime = so.m_nLastRefTime;
        }
    };
    struct ObjMark
    {
        ObjMark(void)                                                           {}
        ObjMark(const ID &id) : m_id(id), m_pImage(NULL)                        {}
        ObjMark(osg::Image *pImage) : m_pImage(pImage)                          {}
        ObjMark(const ObjMark &mark) : m_id(mark.m_id), m_pImage(mark.m_pImage) {}
        const ObjMark &operator=(const ObjMark &mark)
        {
            if(this == &mark)   return *this;
            m_id = mark.m_id;
            m_pImage = mark.m_pImage;
            return *this;
        }

        bool operator< (const ObjMark &mark) const
        {
            if(m_pImage < mark.m_pImage)        return true;
            else if(m_pImage > mark.m_pImage)   return false;

            if(m_id < mark.m_id)                return true;
            return false;
        }
        bool operator==(const ObjMark &mark) const
        {
            if(m_id != mark.m_id)               return false;
            if(m_pImage != mark.m_pImage)       return false;
            return true;
        }
        bool operator!=(const ObjMark &mark) const      {   return !operator==(mark);   }
        bool operator> (const ObjMark &mark) const      {   return !(operator<(mark) || operator==(mark));  }
        bool operator<=(const ObjMark &mark) const      {   return !operator>(mark);    }
        bool operator>=(const ObjMark &mark) const      {   return !operator<(mark);    }

        ID                          m_id;
        osg::observer_ptr<Image>    m_pImage;
    };


    std::map<ObjMark, SharedObject>     m_mapObjectPool;            // 对象池
    std::map<UINT_64, ObjMark>          m_mapObjectRefTime;         // 对象被访问的时间
};

}

#endif
