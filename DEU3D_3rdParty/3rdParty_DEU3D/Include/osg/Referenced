/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_REFERENCED
#define OSG_REFERENCED 1

#include <osg/Export>

#include <OpenThreads/ScopedLock>
#include <OpenThreads/Mutex>
#include <OpenThreads/Atomic>

#include <OpenSP/Ref.h>

#if !defined(_OPENTHREADS_ATOMIC_USE_MUTEX)
# define _OSG_REFERENCED_USE_ATOMIC_OPERATIONS
#endif

namespace osg {

// forward declare, declared after Referenced below.
class DeleteHandler;

/** template class to help enforce static initialization order. */
template <typename T, T M()>
struct depends_on
{
    depends_on() { M(); }
};

/** Base class for providing reference counted objects.*/
class OSG_EXPORT Referenced : virtual public OpenSP::Ref
{
    //friend class DeleteHandler;
    public:
        Referenced() : OpenSP::Ref()    {} 
        
        explicit Referenced(bool threadSafeRefUnref) : OpenSP::Ref(threadSafeRefUnref)    {} 

        Referenced(const Referenced& ref) : OpenSP::Ref(ref)    {};

        inline Referenced& operator = (const Referenced&) { return *this; }

        /** Get the mutex used to ensure thread safety of ref()/unref(). */
        OpenThreads::Mutex* getRefMutex() const;

        /** Get the optional global Referenced mutex, this can be shared between all osg::Referenced.*/
        static OpenThreads::Mutex* getGlobalReferencedMutex();

        //friend class DeleteHandler;

        /** Set a DeleteHandler to which deletion of all referenced counted objects
          * will be delegated.*/
        //static void setDeleteHandler(DeleteHandler* handler);

        /** Get a DeleteHandler.*/
        //static DeleteHandler* getDeleteHandler();

       
    protected:
    
        virtual ~Referenced();

        virtual void signalObserversAndDelete(bool signalDelete, bool doDelete) const;
};

// intrusive_ptr_add_ref and intrusive_ptr_release allow
// use of osg Referenced classes with boost::intrusive_ptr
inline void intrusive_ptr_add_ref(Referenced* p) { p->ref(); }
inline void intrusive_ptr_release(Referenced* p) { p->unref(); }

}

#endif
