/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGDB_READFILE
#define OSGDB_READFILE 1

#include <string>

#include <osg/Node>
#include <osg/Image>

#include <osgDB/Export>
#include <osgDB/Registry>

#include <common/deuImage.h>

namespace osgDB {


/** Read an osg::Object from file. 
  * Return valid osg::Object on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Object* readObjectFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::Object* readObjectFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Object from file. 
  * Return valid osg::Object on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Object* readObjectFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readObjectFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::Object* readObjectFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readObjectFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Image from file. 
  * Return valid osg::Image on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Image*  readImageFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::Image*  readImageFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Image from file. 
  * Return valid osg::Image on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Image*  readImageFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readImageFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::Image*  readImageFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readImageFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::HeightField from file. 
  * Return valid osg::HeightField on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::HeightField*  readHeightFieldFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::HeightField*  readHeightFieldFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::HeightField from file. 
  * Return valid osg::HeightField on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::HeightField*  readHeightFieldFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readHeightFieldFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::HeightField*  readHeightFieldFile(const ID &id, const osg::Referenced *creationInfo = NULL)
{
    return readHeightFieldFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Node from file. 
  * Return valid osg::Node on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Node*  readNodeFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::Node*  readNodeFile(const ID &id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Node from file. 
  * Return valid osg::Node on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Node*  readNodeFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readNodeFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::Node*  readNodeFile(const ID &id, const osg::Referenced *creationInfo = NULL)
{
    return readNodeFile(id,Registry::instance()->getOptions(), creationInfo);
}


/** Read an osg::Shader from file. 
  * Return valid osg::Shader on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::Shader*  readShaderFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::Shader*  readShaderFile(const ID &id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Shader from file. 
  * Return valid osg::Shader on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Shader*  readShaderFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readShaderFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::Shader*  readShaderFile(const ID &id, const osg::Referenced *creationInfo = NULL)
{
    return readShaderFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Shader from file and set to specified shader type. 
  * Return valid osg::Shader on success,
  * return NULL on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Shader* readShaderFile(osg::Shader::Type type, const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL)
{
    osg::Shader* shader = readShaderFile(filename, options, creationInfo);
    if (shader && type != osg::Shader::UNDEFINED) shader->setType(type);
    return shader;
}
inline osg::Shader* readShaderFile(osg::Shader::Type type, const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL)
{
    osg::Shader* shader = readShaderFile(id, options, creationInfo);
    if (shader && type != osg::Shader::UNDEFINED) shader->setType(type);
    return shader;
}

/** Read an osg::Shader from file and set to specified shader type 
  * Return valid osg::Shader on success,
  * return NULL on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::Shader* readShaderFile(osg::Shader::Type type, const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readShaderFile(type, filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::Shader* readShaderFile(osg::Shader::Type type, const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readShaderFile(type, id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Object from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::ref_ptr<osg::Object> readRefObjectFile(const std::string& filename,const Options* options);
extern OSGDB_EXPORT osg::ref_ptr<osg::Object> readRefObjectFile(const ID& id,const Options* options);

/** Read an osg::Object from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::ref_ptr<osg::Object> readRefObjectFile(const std::string& filename)
{
    return readRefObjectFile(filename,Registry::instance()->getOptions());
}
inline osg::ref_ptr<osg::Object> readRefObjectFile(const ID& id)
{
    return readRefObjectFile(id,Registry::instance()->getOptions());
}

/** Read an osg::Image from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::ref_ptr<osg::Image>  readRefImageFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::ref_ptr<osg::Image>  readRefImageFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Image from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::ref_ptr<osg::Image>  readRefImageFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readRefImageFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::ref_ptr<osg::Image>  readRefImageFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readRefImageFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::HeightField from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::ref_ptr<osg::HeightField>  readRefHeightFieldFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::ref_ptr<osg::HeightField>  readRefHeightFieldFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::HeightField from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::ref_ptr<osg::HeightField>  readRefHeightFieldFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readRefHeightFieldFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::ref_ptr<osg::HeightField>  readRefHeightFieldFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readRefHeightFieldFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Node from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::ref_ptr<osg::Node>  readRefNodeFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::ref_ptr<osg::Node>  readRefNodeFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

/** Read an osg::Node from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::ref_ptr<osg::Node>  readRefNodeFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readRefNodeFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::ref_ptr<osg::Node>  readRefNodeFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readRefNodeFile(id,Registry::instance()->getOptions(), creationInfo);
}

/** Read an osg::Shader from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * Use the Options object to control cache operations and file search paths in osgDB::Registry.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
extern OSGDB_EXPORT osg::ref_ptr<osg::Shader>  readRefShaderFile(const std::string& filename,const Options* options, const osg::Referenced *creationInfo = NULL);
extern OSGDB_EXPORT osg::ref_ptr<osg::Shader>  readRefShaderFile(const ID& id,const Options* options, const osg::Referenced *creationInfo = NULL);

extern OSGDB_EXPORT cmm::image::IDEUImage* parseImageFromStream(const void *pBuffer, unsigned nLength);

/** Read an osg::Shader from file. 
  * Return an assigned osg::ref_ptr on success,
  * return an osg::ref_ptr with a NULL pointer assigned to it on failure.
  * The osgDB::Registry is used to load the appropriate ReaderWriter plugin
  * for the filename extension, and this plugin then handles the request
  * to read the specified file.*/
inline osg::ref_ptr<osg::Shader>  readRefShaderFile(const std::string& filename, const osg::Referenced *creationInfo = NULL)
{
    return readRefShaderFile(filename,Registry::instance()->getOptions(), creationInfo);
}
inline osg::ref_ptr<osg::Shader>  readRefShaderFile(const ID& id, const osg::Referenced *creationInfo = NULL)
{
    return readRefShaderFile(id,Registry::instance()->getOptions(), creationInfo);
}


}

#endif
