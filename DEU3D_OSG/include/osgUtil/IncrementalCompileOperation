/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGUTIL_INCREMENTALCOMPILEOPERATOR
#define OSGUTIL_INCREMENTALCOMPILEOPERATOR

#include <osgUtil/GLObjectsVisitor>
#include <osg/Geometry>

namespace osgUtil {


class OSGUTIL_EXPORT StateToCompile : public osg::NodeVisitor
{
    public:

        StateToCompile(GLObjectsVisitor::Mode mode);

        typedef std::set<osg::Drawable*> DrawableSet;
        typedef std::set<osg::StateSet*> StateSetSet;
        typedef std::set<osg::Texture*> TextureSet;
        typedef std::set<osg::Program*> ProgramSet;

        DrawableSet _drawablesHandled;
        StateSetSet _statesetsHandled;

        GLObjectsVisitor::Mode _mode;
        DrawableSet _drawables;
        TextureSet  _textures;
        ProgramSet  _programs;
        bool        _assignPBOToImages;
        osg::ref_ptr<osg::PixelBufferObject> _pbo;

        bool empty() const { return _textures.empty() &&  _programs.empty() && _drawables.empty(); }

        virtual void apply(osg::Node& node);
        virtual void apply(osg::Geode& node);

        virtual void apply(osg::Drawable& drawable);
        virtual void apply(osg::StateSet& stateset);
        virtual void apply(osg::Texture& texture);

};

class OSGUTIL_EXPORT IncrementalCompileOperation : public osg::GraphicsOperation
{
    public:

        IncrementalCompileOperation();

        /** Return true if the IncrementCompileOperation is active.*/
        bool isActive() const { return !_contexts.empty(); }

        bool requiresCompile(StateToCompile& stateToCompile);

        typedef std::vector<osg::GraphicsContext*> Contexts;
        void assignContexts(Contexts& contexts);
        void removeContexts(Contexts& contexts);

        void addGraphicsContext(osg::GraphicsContext* gc);
        void removeGraphicsContext(osg::GraphicsContext* gc);

        typedef std::set<osg::GraphicsContext*> ContextSet;
        ContextSet& getContextSet() { return _contexts; }
        const ContextSet& getContextSet() const { return _contexts; }

        virtual void operator () (osg::GraphicsContext* context);

        virtual void blockOperation(bool bBlock);

        struct OSGUTIL_EXPORT CompileInfo : public osg::RenderInfo
        {
            CompileInfo(osg::GraphicsContext* context, IncrementalCompileOperation* ico);

            IncrementalCompileOperation*        incrementalCompileOperation;
        };
        
        struct CompileOp : public osg::Referenced
        {
            /** compile associated objects, return true if object as been fully compiled and this CompileOp can be removed from the to compile list.*/
            virtual bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait) = 0;
        };

        struct OSGUTIL_EXPORT CompileDrawableOp : public CompileOp
        {
            CompileDrawableOp(osg::Drawable* drawable);
            bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait);
            osg::ref_ptr<osg::Drawable> _drawable;
        };

        struct OSGUTIL_EXPORT CompileTextureOp : public CompileOp
        {
            CompileTextureOp(osg::Texture* texture);
            bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait);
            osg::ref_ptr<osg::Texture> _texture;
        };

        struct OSGUTIL_EXPORT CompileProgramOp : public CompileOp
        {
            CompileProgramOp(osg::Program* program);
            bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait);
            osg::ref_ptr<osg::Program> _program;
        };

        class OSGUTIL_EXPORT CompileList
        {
        public:
            CompileList();
            ~CompileList();

            bool empty() const { return _compileOps.empty(); }
            void add(CompileOp* compileOp);
            void add(osg::Drawable* drawable) { add(new CompileDrawableOp(drawable)); }
            void add(osg::Texture* texture) { add(new CompileTextureOp(texture)); }
            void add(osg::Program* program) { add(new CompileProgramOp(program)); }

            bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait);

            typedef std::list< osg::ref_ptr<CompileOp> > CompileOps;
            CompileOps _compileOps;
        };

        class CompileSet;

        struct CompileCompletedCallback : public virtual osg::Referenced
        {
            /// return true if the callback assumes responsibility for merging any associated subgraphs with the main scene graph
            /// return false if callback doesn't handle the merge, and instead requires the IncrementalCompileOperation to handle this for us
            virtual bool compileCompleted(CompileSet* compileSet) = 0;
        };

        class OSGUTIL_EXPORT CompileSet : public osg::Referenced
        {
        public:
            CompileSet() {}

            CompileSet(osg::Node*subgraphToCompile):
                _subgraphToCompile(subgraphToCompile) {}

            CompileSet(osg::Group* attachmentPoint, osg::Node* subgraphToCompile):
                _attachmentPoint(attachmentPoint),
                _subgraphToCompile(subgraphToCompile) {}

            void buildCompileMap(ContextSet& contexts, StateToCompile& stateToCompile);
            void buildCompileMap(ContextSet& contexts, GLObjectsVisitor::Mode mode=GLObjectsVisitor::COMPILE_DISPLAY_LISTS|GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES);

            bool compile(CompileInfo& compileInfo, OpenThreads::Block &blockWait);

            osg::observer_ptr<osg::Group>           _attachmentPoint;
            osg::ref_ptr<osg::Node>                 _subgraphToCompile;
            osg::ref_ptr<CompileCompletedCallback>  _compileCompletedCallback;

            typedef std::map<osg::GraphicsContext*, CompileList >  CompileMap;
            CompileMap                              _compileMap;

        protected:

            virtual ~CompileSet() {}
        };

        typedef std::list< osg::ref_ptr<CompileSet> >  CompileSets;

        /** Add a subgraph to be compiled.*/
        void add(osg::Node* subgraphToCompile);

        /** Add a subgraph to be compiled and add automatically to attachPoint on call to mergeCompiledSubgraphs.*/
        void add(osg::Group* attachmentPoint, osg::Node* subgraphToCompile);

        /** Add a CompileSet to be compiled.*/
        void add(CompileSet* compileSet, bool callBuildCompileMap=true);

        /** Remove CompileSet from list.*/
        void remove(CompileSet* compileSet);

        OpenThreads::Mutex* getToCompiledMutex() { return &_toCompileMutex; }
        CompileSets& getToCompile() { return _toCompile; }

    protected:

        virtual ~IncrementalCompileOperation();

        void compileSets(CompileSets& toCompile, CompileInfo &compileInfo);

        OpenThreads::Block                  _blockAllowCompiling;

        OpenThreads::Mutex                  _toCompileMutex;
        CompileSets                         _toCompile;

        ContextSet                          _contexts;

};

}

#endif

