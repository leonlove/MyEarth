#ifndef SINGLE_LINE_GEODE_H_71F11750_24DE_43DB_8F2B_1C6801ED4558_INCLUDE
#define SINGLE_LINE_GEODE_H_71F11750_24DE_43DB_8F2B_1C6801ED4558_INCLUDE

#include <osg/Geode>

namespace osg {
class OSG_EXPORT SingleLineGeode : public osg::Geode
{
public:
    explicit SingleLineGeode(const osg::Vec3d &point0, const osg::Vec3d &point1, const osg::Vec4 &color, float fltWidth);
    virtual ~SingleLineGeode(void);

protected:
    virtual osg::BoundingSphere computeBound(void) const;
    virtual void traverse(osg::NodeVisitor &nv);

protected:
    class OSG_EXPORT ShadowDrawable : public osg::Drawable
    {
        friend class SingleLineGeode;
    protected:
        explicit ShadowDrawable(const osg::Vec3d &point0, const osg::Vec3d &point1, const osg::Vec4 &color, float fltWidth);
        virtual ~ShadowDrawable(void);

    protected:
        void    traverse(osg::NodeVisitor &nv);

    protected:
        virtual Object* cloneType() const { return NULL; }
        virtual Object* clone(const osg::CopyOp& copyop) const { return NULL; }
        virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const ShadowDrawable*>(obj)!=NULL; }
        virtual const char* libraryName() const { return "osg"; }
        virtual const char* className() const { return "ShadowDrawable"; }
        virtual void drawImplementation(osg::RenderInfo &renderInfo) const  {}
        virtual osg::BoundingBox computeBound(void) const;
        virtual void accept(osg::PrimitiveFunctor &functor) const;

    protected:
        unsigned __int64    m_nLineKey;
        const osg::Vec3d    m_point0;
        const osg::Vec3d    m_point1;
        const osg::Vec4     m_color;
        const float         m_fltWidth;
    };

public:
    unsigned __int64 getLineKey(void) const {   return m_pShadowDrawable->m_nLineKey;   }

protected:
    osg::ref_ptr<ShadowDrawable>    m_pShadowDrawable;
};

}

#endif

