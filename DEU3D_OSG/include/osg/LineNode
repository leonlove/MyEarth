#ifndef LINE_NODE_9F184E46_F515_4702_8E56_03FC84E2790D_INCLUDE
#define LINE_NODE_9F184E46_F515_4702_8E56_03FC84E2790D_INCLUDE

#include <vector>
#include <osg/Group>

namespace osg {

class OSG_EXPORT LineNode : public Group
{
public:
    explicit LineNode(void);
             LineNode(const LineNode &node, const CopyOp &copyop=CopyOp::SHALLOW_COPY);
    virtual ~LineNode(void);
    META_Node(osg, LineNode);

protected:
    virtual void traverse(NodeVisitor& nv);

public:
    void        setIntegration(bool bIntegration);
    bool        getIntegration(void)                {   return m_bCreateAsIntegration;      }

    void        addVertex(const Vec3d &vtx);
    bool        insertVertex(unsigned pos, const Vec3d &vtx);
    bool        removeVertex(unsigned pos);
    unsigned    getVerticesCount(void) const        {   return m_vecVertices.size();        }

    void        setColor(const osg::Vec4 &color)    {   m_color = color;            m_bDirtyRenderInfo = true;  }
    const       osg::Vec4 &getColor(void)           {   return m_color;                     }

    void        setLineWidth(float fltWidth)        {   m_fltLineWidth = fltWidth;  m_bDirtyRenderInfo = true;  }
    float       getLineWidth(void) const            {   return m_fltLineWidth;              }

    void        OnPagedLODExpired(void);

protected:
    Node       *createAsIntegration(void);
    Node       *createAsNonIntegration(void);

protected:
    std::vector<Vec3d>      m_vecVertices;
    Vec4                    m_color;
    float                   m_fltLineWidth;
    bool                    m_bDirtyRenderInfo;
    bool                    m_bCreateAsIntegration;
};

}

#endif



