/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_REF_PTR
#define OSG_REF_PTR 1

#include <osg/Config>
#include <OpenSP/op.h>

namespace osg {

template<typename T> class observer_ptr;

/** Smart pointer for handling referenced counted objects.*/
template<class T>
class ref_ptr : public OpenSP::sp<T>
{
    public:
        ref_ptr() : OpenSP::sp<T>() {}
        ref_ptr(T* ptr) : OpenSP::sp<T>(ptr) {}
        ref_ptr(const ref_ptr& rp) : OpenSP::sp<T>(rp) {}
        template<class Other> ref_ptr(const ref_ptr<Other>& rp) : OpenSP::sp<T>(rp) {}
        ref_ptr(observer_ptr<T>& optr) : OpenSP::sp<T>(optr) {}

        ref_ptr& operator = (const ref_ptr& rp)
        {
            assign(rp);
            return *this;
        }

        template<class Other> ref_ptr& operator = (const ref_ptr<Other>& rp)
        {
            assign(rp);
            return *this;
        }

        template<class Other> void assign(const ref_ptr<Other>& rp)
        {
            OpenSP::sp<T>::assign(rp);
        }
};

}

#endif
